# Training

Cellfinder includes a pretrained network for cell candidate classification. 
This will likely need to be retrained for different applications. There are
two choices:

* Continue training the existing network
* Start from scratch

### Prerequsites
To train the network, you will need:

* Tiff cubes generated by running cellfinder with the `--no-classification` 
option or by using `cellfinder_gen_cubes`.
* (Optionally) an .xml file (as per cellfinder output) or a directory
as per [ROI sorter](https://github.com/SainsburyWellcomeCentre/Roi_sorter) 
which defines which tiff cubes are `cell` or `no_cell`

### Generating the training YAML file
To specify the datasets used for training, a YAML file must be generated. This
file will have a single list named `data`, and each entry will have the 
following parameters:

* cube_dir: The path to the directory containing the tiff cubes
* cell_def: A file that defines which of the cubes in cube_dir are relevant.
 Can either be an cell counter xml file, or a directory with rois - 
 as output when manually sorting/correcting a previous run 
 (using [ROI sorter](https://github.com/SainsburyWellcomeCentre/Roi_sorter))
 If all cubes should be used, set this parameter to empty string ("") 
 or null (without quote marks).
* type: If this entry describes cells, set it to "cell", otherwise use 
"no_cell". Each entry must contain either ONLY cells or ONLY non_cells.
* signal_channel: The index or number of the signal channel. Note This number should match the one in the cube tif files!
* bg_channel: The index or number of the background channel. Note This number should match the one in the cube tif files!
Set to -1 if no background channel is present.

e.g.:
```yaml
data:
- {cube_dir: /path/to/cubes1,
   cell_def: /path/to/cubes1_cells.xml,
   type: "cell", 
   signal_channel: 1,
   bg_channel: 2}
- {cube_dir: /path/to/cubes1,
   cell_def: /path/to/cubes1_no_cells.xml,
   type: "no_cell", 
   signal_channel: 1,
   bg_channel: 2}
- {cube_dir: /path/to/cubes2,
   cell_def: /path/to/cubes2_cells_dir,
   type: "cell", 
   signal_channel: 2,
   bg_channel: 0}
- {cube_dir: /path/to/cubes2,
   cell_def: /path/to/cubes2_no_cells_dir,
   type: "no_cell", 
   signal_channel: 2,
   bg_channel: 0}
```

### Start training
```bash
cellfinder_train -/path/to/training_yaml.yml  /path/to/output/directory/
```

### Arguments
#### Positional
* The path to the yaml run file
* Output directory for the trained model (or model weights)
results

#### The following options can also be used:
* `--continue-training` Continue training from an existing trained model. 
If no model or model weights are specified, this will continue from the 
included model.
* `--trained-model` Path to a trained model to continue training
* `--model-weights` Path to existing model weights to continue training
* `--network-depth` Resnet depth 
(based on [He et al. (2015)](https://arxiv.org/abs/1512.03385)). Choose from
(18, 34, 50, 101 or 152). In theory, a deeper network should classify better,
at the expense of a larger model, and longer training time. Default: 50
* `--batch-size` Batch size for training (how many cell candidates to process 
at once). Default: 16
* `--epochs` How many times to use each sample for training. Default: 1000
* `--test-fraction` What fraction of data to keep for validation. Default: 0.1
* `--no-augment` Do not use data augmentation
* `--save-weights` Only store the model weights, and not the full model. 
Useful to save storage space.
* `--tensorboard` Log to `output_directory/tensorboard`. Use 
`tensorboard --logdir outputdirectory/tensorboard` to view.


#### Further help
All cellfinder_train options can be found by using the `-h` flag

``` bash
cellfinder_train -h
```

